/BEGIN_TABLE AMCHEAD
NAME A30
VERS A8
USER A30
/BEGIN_DATA AMCHEAD
PowerDesigner/WAM
6.1.3

/END_TABLE AMCHEAD

/BEGIN_TABLE AMCMODL
@       N5
OID     N10
MODL    N10
NAME    A80
CODE    A80
LABL    A254
DESC    TXT
NOTE    TXT
OPTS    TXT
EXOP    TXT
DBMS    A256
FILE    A256
HEAD    TXT
FOOT    TXT
POID    N10
PNAM    A80
PCOD    A80
USER    A80
VERS    A8
CDAT    N12
MDAT    N12
EDAT    N12
PART    N1
ACCS    N5
CUST    TXT
/BEGIN_DATA AMCMODL
3
1
1
TPCDS
TPCDS





ANSI Level 2
ansi2.def


0
TPCDS
TPCDS


940354999
1163537651
0
0
0

/END_TABLE AMCMODL

/BEGIN_TABLE AMCDOMN
@       N5
OID     N10
DOMN    N10
NAME    A80
CODE    A80
DESC    TXT
NOTE    TXT
LABL    A254
DTTP    A30
MLEN    N8
PREC    N2
IDNT    N1
WDEF    N1
MAND    N1
UNIT    A8
FRMT    A20
LVAL    A20
HVAL    A20
DVAL    A30
UPPR    N1
LOWR    N1
NMDF    N1
VALS    TXT
CRUL    TXT
GRUL    TXT
SOID    N10
ATYP    N10
PROF    N10
ROPR    N1
/BEGIN_DATA AMCDOMN
/END_TABLE AMCDOMN

/BEGIN_TABLE AMCTABL
@       N5
OID     N10
TABL    N10
MODL    N10
NAME    A80
CODE    A80
LABL    A254
DESC    TXT
NOTE    TXT
NBRC    N24,0
SOID    N10
TOBJ    N5
COBJ    A80
OPTS    TXT
PKOP    TXT
CRUL    TXT
SRUL    TXT
PKCN    A30
CKCN    A30
HEAD    TXT
FOOT    TXT
NGEN    N1
OWNR    N10
ATYP    N10
TSTD    N8
ROPR    N1
/BEGIN_DATA AMCTABL
3
15
15
1
Customer_Address
CA

One row for each unique customer location\
\
Describes physical location of the customer\
\
Data generator enforces constraint that customers with same household demographic will have the same address (since at this point we define household as customers with the same address)  This was originally enforced by having each row in\\
 this table contain a reference to a household demographic entry.  This created several strange linkages in other tables that contained both addresses and household demographics.
Remove reference to household demographics. Data generator will enforce constraint that customers with the same household demographics will have the same address.\
\
Possible candidate for refresh function:  find and remove stale entries.
150000
0
0
ADDRESS








0
0
0
0
0
3
28
28
1
Customer
C



100000
0
0
CUSTOMER








0
0
0
0
0
3
39
39
1
Customer_Demographics
CD

One row for each unique combination of customer demographics.\
\
The values in this table represent "RAW" answers provided by a customer in response to demographic questions.
Purchase band is not defined.\
To be consistent with the income band referenced from household demographics this would be a separate dimension.  Do we really want to move to the snowflake model?
10000
0
0
DEMOGRAPHICS




PK_C_DEMOGRAPHICS



0
0
0
0
0
3
49
49
1
Store
S



500
0
0
STORE








0
0
0
0
0
3
50
50
1
Inventory
INV



15000000
0
0
INVENTORY








0
0
0
0
0
3
270
270
1
Item
I


1. In column descriptions, remove all references to Product and Product_ID, since these columns have been deleted.  Also delete PRODUCT_NAME column completely.\
\
2. Research problem:  explore functions that map from item upwards to higher levels of hierarchy, and maintain proper inclusion (i.e. if Item 1,2 and 3 are in Class A, and Item 4,5, and 6 are in Class B, we should never map Item 2 to any\\
 other class but A.  A possible approach is:\
\
item ID mod 1000 = subclass_ID, then subclass_ID mod 200 = class_ID, etc.  This maintains inclusion, but has the perhaps undesirable property that every subclass has the same number of items, every class has the same number of subclasses,\\
 etc.  In other words, the "tree" describing the hierarchy is perfectly balanced at all levels.\
\
A way to "unbalance" the tree at the top level would be to only use the "mod" approach up to and including selecting the Class of a generated item.  After that, use statically generated mappings of Category->subcategory->class that contain\\
 skew.  I.e. some categories have more subcategories than others, some subcats. have more classes than others.  \
\
In any case, decide how many distinct values there are for each hierarchy_ID column.  In the above approach, doing mod 10 gives 10 distinct values for a given level.  Need to specify this at all levels of the hierarchy.\
\
3. Assign textual strings to hierarchy description columns (category, subcategory, class, subclass, brand, item).  One idea is to use statically generated mappings *and* names (see above) for category->subcategory->class based on common\\
 retail departments.  For the lower levels of the hierarchy, one could do the following:\
\
Class nnn gets the name concat(category_name, subcategory_name, "classnnn")\
Subclass xxx gets the name "SBCLxxxx"\
Brandyyy gets concat("SBCLxxxx", BRANDyyyyyy") where Brand yyyy is in Subclass xxx. \
Item zzz gets name concat ("SBCLxxx", "BRANDyyyyy", "ITEMzzzz") where Item zzz has been determined (using the function defined in "research problem", above) to be in Brand yyyy and Subclass xxxx).\
\
4.) The hierarchy item->brand->manufacturer is somewhat separate.  Need to define a function to map brand_id to manufacturer_ID, and decide on a manufacturer name.  As above, one could simply say that manufacturer xxx is named\\
 "MANUFACTURERxxx".\
\
5.) There are a number of attribute columns that don't apply to every conceivable item.  For example, Flavor would only apply to food items, etc.  One approach would be to mandate during generation that the population (or lack thereof) of\\
 the attribute column would depend on category membership of the item.  For example, if an item is in the Clothing category, we would populate the (size and unit) columns.  If an item is in the Food category, we might populate the (size,\\
 flavor, container) columns.  If a column is not to be populated (because of "category mismatch), we would populate it with a value that means "not applicable".   Need to specify column domains for each of: formulation, flavor, size,\\
 container, units.\
\
6.) Need to decide how many product managers there are.
10000
0
0
ITEM








0
0
0
0
0
3
308
308
1
Date_Dim
D

Table of dates.\
Values in almost all fields in this table can be derived. It is used to simplify queries.
Things to do:\
- we may want to add the following columns\
Previous Day, Week, Month, Quarter, Year\
Next Day, Week, Month, Quarter, Year\
\
- as we are developing queries we may add additional unspecified columns\
\
- it is not clear if we want to design the table so that it needs update periodically. We need to decide if we really need this, if such maintenance pays of by writing simpler SQL
2500
0
0
DATE




DATE_PK



0
0
0
0
0
3
353
353
1
Catalog_Returns
CR



10000
0
0
CATALOG_RETURNS








0
0
0
0
0
3
974
974
1
Promotion
P

One row for each promotion that has/is being run during the lifespan of the data set

15000
0
0
PROMOTION




PK_PROMOTION



0
0
0
0
0
3
990
990
1
Catalog_Page
CP



5000
0
0
CATALOG_PAGE




PK_CATALOG_PAGE



0
0
0
0
0
3
1005
1005
1
Web_Page
WP



1000
0
0
WEB_PAGE




PK_WEB_PAGE



0
0
0
0
0
3
1022
1022
1
Warehouse
W



10
0
0
WAREHOUSE




PK_WAREHOUSE



0
0
0
0
0
3
1031
1031
1
Ship_Mode
SM



200
0
0
SHIP_MODE








0
0
0
0
0
3
1045
1045
1
Call_Center
CC



10
0
0
CALL_CENTER




PK_CALL_CENTER



0
0
0
0
0
3
1076
1076
1
Web_Site
WEB



10
0
0
WEB_SITE




PK_WEB_SITE



0
0
0
0
0
3
1118
1118
1
Time_Dim
T


It seems like the last 20 byte fields (shift,sub-shift and meal time) should be in a separate small dimension tables, and the TIME table itself should contain only a code here. But the additional space is only 0.5 MB anyway.\
Maybe we should get rid of those.
86400
0
0
TIME




PK_TIME



0
0
0
0
0
3
1127
1127
1
Reason
R



150
0
0
REASON




PK_REASON



0
0
0
0
0
3
1192
1192
1
Store_Returns
SR



10000
0
0
STORE_RETURNS




PK_STORE_RETURNS



0
0
0
0
0
3
1260
1260
1
Web_Returns
WR



2000000
0
0
WEB_RETURNS




PK_WEB_RETURNS



0
0
0
0
0
3
1351
1351
1
Web_Sales
WS



200000000
0
0
WEB_SALES




PK_WEB_SALES



0
0
0
0
0
3
1468
1468
1
Catalog_Sales
CS



200000000
0
0
CATALOG_SALES




PK_CATALOG_SALES



0
0
0
0
0
3
1550
1550
1
Store_Sales
SS



200000000
0
0
STORE_SALES




PK_STORE_SALES



0
0
0
0
0
3
15340
15340
1
Income_Band
IB

One row for each  income range
Are ranges mutually exclusive?  Can they overlap?
20
0
0
IB








0
0
0
0
0
3
29069
29069
1
Household_demographics
HD
HD


0
0
0
HD




PK_H_DEMOGRAPHICS



0
0
0
0
0
3
38739
38739
1
Dbgen_Version
DBGEN_VERSION
Version of dbgen used to load database


0
0
0
DBGEN_VERSION




DV_VERSION



0
0
0
0
0
/END_TABLE AMCTABL

/BEGIN_TABLE AMCCOLN
@       N5
OID     N10
COLN    N10
NAME    A80
CODE    A80
LABL    A254
DESC    TXT
NOTE    TXT
TABL    N10
DOMN    N10
DTTP    A30
MLEN    N8
PREC    N2
IDNT    N1
WDEF    N1
UNIT    A8
FRMT    A20
LVAL    A20
HVAL    A20
DVAL    A30
UPPR    N1
LOWR    N1
NMDF    N1
VALS    TXT
CRUL    TXT
GRUL    TXT
PRIM    N1
FORN    N1
MAND    N1
DISP    N1
SOID    N10
TOBJ    N5
COBJ    A80
CKCN    A30
NUMR    N8
PROF    N10
REDU    N8
NULV    N5
AVLN    N8
ATYP    N10
ROPR    N1
/BEGIN_DATA AMCCOLN
3
23887
23887
ca_address_sk
CA_ADDRESS_SK



15
0
INTEGER
0
0
0
0





0
0
0



1
0
1
1
0
0
CA_ADDRESS_SK

1
0
-100
0
0
0
0
3
19
19
ca_address_id
CA_ADDRESS_ID

Identifier that is the unique id of the address table. \
\
There is one row here for anything that needs an address (customer, retail store, call center, web site, warehouse, and fact tables that show customer address at the time of the sale).   Dimension table references represent current\\
 addresses for call center, web site, warehouse or customer.\
\
There needs to be a well-known identifier for an UNKNOWN address.

15
0
CHAR(16)
16
0
0
0





0
0
0



0
0
1
1
0
0
A_ADDR_ID

2
0
0
0
0
0
0
3
20
20
ca_street_number
CA_STREET_NUMBER



15
0
CHAR(10)
10
0
0
0





0
0
0



0
0
0
1
0
0
A_NUMBER

3
0
0
0
0
0
0
3
21
21
ca_street_name
CA_STREET_NAME



15
0
VARCHAR(60)
60
0
0
0





0
0
0



0
0
0
1
0
0
A_STREET_NAME

4
0
0
0
0
0
0
3
22
22
ca_street_type
CA_STREET_TYPE



15
0
CHAR(15)
15
0
0
0





0
0
0



0
0
0
1
0
0
A_STREET_TYPE

5
0
0
0
0
0
0
3
2800
2800
ca_suite_number
CA_SUITE_NUMBER



15
0
CHAR(10)
10
0
0
0





0
0
0



0
0
0
1
0
0
A_SUITE

6
0
-100
0
0
0
0
3
23
23
ca_city
CA_CITY



15
0
VARCHAR(60)
60
0
0
0





0
0
0



0
0
0
1
0
0
A_CITY

7
0
0
0
0
0
0
3
24
24
ca_county
CA_COUNTY



15
0
VARCHAR(30)
30
0
0
0





0
0
0



0
0
0
1
0
0
A_COUNTY

8
0
0
0
0
0
0
3
25
25
ca_state
CA_STATE



15
0
CHAR(2)
2
0
0
0





0
0
0



0
0
0
1
0
0
A_STATE

9
0
0
0
0
0
0
3
1107
1107
ca_zip
CA_ZIP



15
0
CHAR(10)
10
0
0
0





0
0
0



0
0
0
1
0
0
A_ZIP

10
0
-100
0
0
0
0
3
5961
5961
ca_country
CA_COUNTRY



15
0
VARCHAR(20)
20
0
0
0





0
0
0



0
0
0
1
0
0
A_COUNTRY

11
0
-100
0
0
0
0
3
1106
1106
ca_gmt_offset
CA_GMT_OFFSET

With Latitude and Logitude should be able to calculate distance between entities

15
0
DECIMAL (5,2)
5
2
0
0





0
0
0



0
0
0
1
0
0
A_LATITUDE

12
0
-100
0
0
0
0
3
5973
5973
ca_location_type
CA_LOCATION_TYPE

Type of residence or location\
\
 rent/own single family house, rent multi-family house, own multi-family house, rent/own apartment, rent/own condo, rent/own commercial, retail store, call center, web site, warehouse, Unknown

15
0
CHAR(20)
20
0
0
0





0
0
0



0
0
0
1
0
0
A_LOCATION_TYPE

13
0
-100
0
0
0
0
3
22670
22670
c_customer_sk
C_CUSTOMER_SK



28
0
INTEGER
0
0
0
0





0
0
0



1
0
1
1
0
0
C_CUSTOMER_SK

1
0
-100
0
0
0
0
3
29
29
c_customer_id
C_CUSTOMER_ID

Sales and returns point to the customer table by this id. They also point to the address and demo information in effect at the time of the sale or return.  The customer row has within it information that may change over time, but we are\\
 only interested in knowing the current state (like the name today  - we don't need to save somone's maiden name).  Changing data (addresses, demographics) are broken out into separate tables so that their history can be maintained).  \
\
When a customer column changes occur, the row is updated.  For address and demographics,  the pointers to the Demographics or Address tables are updated (and address rows added).  This way, we seldom add customer records, *and* keep\\
 historical information for sales/returns, and can easily discern the current state of a customer.  Probably should offer users a view called "current customer" which is a prejoin of these three tables.\
\
It is possible for a row to be in the customer table without any sales for the customer. \
\
There needs to be a well-known  identifier for an UNKNOWN customer.

28
0
CHAR(16)
16
0
0
0





0
0
0



0
0
1
1
0
0
C_CUST_KEY

2
0
0
0
0
0
0
3
23922
23922
c_current_cdemo_sk
C_CURRENT_CDEMO_SK



28
0
INTEGER
0
0
0
0





0
0
0



0
1
0
1
0
0
CD_DEMO_SK

3
0
-100
0
0
0
0
3
30073
30073
c_current_hdemo_sk
C_CURRENT_HDEMO_SK



28
0
INTEGER
0
0
0
0





0
0
0



0
1
0
1
0
0
C_CURRENT_HDEMO_SK

4
0
-100
0
0
0
0
3
23888
23888
c_current_addr_sk
C_CURRENT_ADDR_SK



28
0
INTEGER
0
0
0
0





0
0
0



0
1
0
1
0
0
CA_ADDRESS_SK

5
0
-100
0
0
0
0
3
11683
11683
c_first_shipto_date_sk
C_FIRST_SHIPTO_DATE_SK

The date of the first shipment to the customer.

28
0
INTEGER
0
0
0
0





0
0
0



0
1
0
1
0
0
C_FIRST_SHIPTO_DATE

6
0
-100
0
0
0
0
3
11684
11684
c_first_sales_date_sk
C_FIRST_SALES_DATE_SK

The date of first purchase order by the customer.

28
0
INTEGER
0
0
0
0





0
0
0

0

0
1
0
1
0
0
6

7
0
0
0
0
0
1
3
26693
26693
c_salutation
C_SALUTATION



28
0
CHAR(10)
10
0
0
0





0
0
0



0
0
0
1
0
0
C_SALUTATION

8
0
-100
0
0
0
0
3
33
33
c_first_name
C_FIRST_NAME

Customer's first name

28
0
CHAR(20)
20
0
0
0





0
0
0



0
0
0
1
0
0
C_FIRST_NAME

9
0
0
0
0
0
0
3
32
32
c_last_name
C_LAST_NAME

Customer's last name.

28
0
CHAR(30)
30
0
0
0





0
0
0



0
0
0
1
0
0
C_LAST_NAME

10
0
0
0
0
0
0
3
30
30
c_preferred_cust_flag
C_PREFERRED_CUST_FLAG

This field flags "preferred customers", a marketing program.\
\
Y for preferred customers, N for otherwise.

28
0
CHAR(1)
1
0
0
0





0
0
0



0
0
0
1
0
0
C_CUST_ID

11
0
0
0
0
0
0
3
5956
5956
c_birth_day
C_BIRTH_DAY

Numeric number for day of birth.  For example, if someone's birth day is July 4, 1975, the number is 4.\
\
We are not pointing to the date table for this information.  Otherwise, we would need a life-time's worth of date rows in the table.  There is no space issue doing this, it just seems a little silly keeping 120 years worth of days in date. \\
 On the other hand, it might be nice for display purposes to have all the ways of expressing the date that is found in the date table.

28
0
INTEGER
0
0
0
0





0
0
0



0
0
0
1
0
0
C_BIRTH_DAY

12
0
-100
0
0
0
0
3
5957
5957
c_birth_month
C_BIRTH_MONTH

Numeric number for month of birth.  For example, if someone's birth day is July 4, 1975, the number is7.

28
0
INTEGER
0
0
0
0





0
0
0



0
0
0
1
0
0
C_BIRTH_MONTH

13
0
-100
0
0
0
0
3
5958
5958
c_birth_year
C_BIRTH_YEAR

Numeric four digit number for year of birth.  For example, if someone's birth day is July 4, 1975, the number is 1975.

28
0
INTEGER
0
0
0
0





0
0
0



0
0
0
1
0
0
C_BIRTH_YEAR

14
0
-100
0
0
0
0
3
5960
5960
c_birth_country
C_BIRTH_COUNTRY

Country of birth, if known
Will require a list of candidate countries -- no other list exists, since the data set is assumed to be US-centric.
28
0
VARCHAR(20)
20
0
0
0





0
0
0



0
0
0
1
0
0
C_BIRTH_COUNTRY

15
0
-100
0
0
0
0
3
8744
8744
c_login
C_LOGIN

Login to the web site; Random alphanumerics

28
0
CHAR(13)
13
0
0
0





0
0
0



0
0
0
1
0
0
C_LOGIN

16
0
-100
0
0
0
0
3
8752
8752
c_email_address
C_EMAIL

Customer's email address. Stored here since historical email is of no interest

28
0
CHAR(50)
50
0
0
0





0
0
0



0
0
0
1
0
0
C_EMAIL

17
0
-100
0
0
0
0
3
8751
8751
c_last_review_date
C_LAST_REVIEW_DATE

Date of last update for preferred status, purchasing preference, demographic info etc.; Currently a stand-alone date. Should this be a FK to the date table?

28
0
CHAR(10)
10
0
0
0





0
0
0



0
0
0
1
0
0
C_LAST_REVIEW

18
0
-100
0
0
0
0
3
23921
23921
cd_demo_sk
CD_DEMO_SK



39
0
INTEGER
0
0
0
0





0
0
0



1
0
1
1
0
0
CD_DEMO_SK

1
0
-100
0
0
0
0
3
15349
15349
cd_gender
CD_GENDER



39
0
CHAR(1)
1
0
0
0





0
0
0



0
0
0
1
0
0
CD_GENDER

2
0
-100
0
0
0
0
3
15350
15350
cd_marital_status
CD_MARITAL_STATUS



39
0
CHAR(1)
1
0
0
0





0
0
0



0
0
0
1
0
0
CD_MARITAL_STATUS

3
0
-100
0
0
0
0
3
15351
15351
cd_education_status
CD_EDUCATION_STATUS



39
0
CHAR(20)
20
0
0
0





0
0
0



0
0
0
1
0
0
CD_EDUCATION_STATUS

4
0
-100
0
0
0
0
3
15352
15352
cd_purchase_estimate
CD_PURCHASE_ESTIMATE

Lower bound of estimated purchase amount per year

39
0
INTEGER
0
0
0
0





0
0
0



0
0
0
1
0
0
CD_PURCHASE_BAND

5
0
-100
0
0
0
0
3
15353
15353
cd_credit_rating
CD_CREDIT_RATING



39
0
CHAR(10)
10
0
0
0





0
0
0



0
0
0
1
0
0
CD_CREDIT_RATING

6
0
-100
0
0
0
0
3
5969
5969
cd_dep_count
CD_DEP_COUNT

Positive number represents the number of dependents  supported by the customer according to the following::\
\
\
 0-5 number is count; 6 means more than 5; -1 unknown

39
0
INTEGER
0
0
0
0





0
0
0



0
0
0
1
0
0
DE_DEP_COUNT

7
0
-100
0
0
0
0
3
5970
5970
cd_dep_employed_count
CD_DEP_EMPLOYED_COUNT

Positive number represents the number of employed dependents supported by the customer according to the following::\
\
\
 0-5 number is count; 6 means more than 5; -1 unknown5; -1 unknown

39
0
INTEGER
0
0
0
0





0
0
0



0
0
0
1
0
0
DE_DEP_EMPLOYED_COUNT

8
0
-100
0
0
0
0
3
5971
5971
cd_dep_college_count
CD_DEP_COLLEGE_COUNT

Positive number represents the number of dependents in college supported by the customer according to the following::\
\
\
 0-5 number is count; 6 means more than 5; -1 unknown

39
0
INTEGER
0
0
0
0





0
0
0



0
0
0
1
0
0
DE_DEP_COLLEGE_COUNT

9
0
-100
0
0
0
0
3
22739
22739
s_store_sk
S_STORE_SK



49
0
INTEGER
0
0
0
0





0
0
0



1
0
1
1
0
0
S_STORE_SK

1
0
-100
0
0
0
0
3
57
57
s_store_id
S_STORE_ID

Unique identifier for a physical retail store.\
Store has several hierarchies:\
\
store ---> company\
store ---> market ---->  market manager

49
0
CHAR(16)
16
0
0
0





0
0
0



0
0
1
1
0
0
S_ID

2
0
0
0
0
0
0
3
24901
24901
s_rec_start_date
S_REC_START_DATE_ID



49
0
date
0
0
0
0





0
0
0



0
0
0
1
0
0
S_REC_START_DATE_ID

3
0
-100
0
0
0
0
3
24902
24902
s_rec_end_date
S_REC_END_DATE_ID



49
0
date
0
0
0
0





0
0
0



0
0
0
1
0
0
S_REC_END_DATE_ID

4
0
-100
0
0
0
0
3
22844
22844
s_closed_date_sk
S_CLOSED_DATE_SK



49
0
INTEGER
0
0
0
0





0
0
0



0
1
0
1
0
0
D_DATE_SK

5
0
-100
0
0
0
0
3
1037
1037
s_store_name
S_STORE_NAME

Name of the store.  Example:\
Fred Meyer Walker Road\
QFC #185\
Stop and Shop Hollywood\
Gayfers Edgewater Mall\
\
Dependent on store, but is also a unique value\
\
Typically the store name is related to the mall that the store is in. For example, Macy Mall Center, etc.\
\
One proposal: the stoe name is the concatenation of company name and the location, e.g., Broadway Downtown\
\
Should range from 8-30 characters in length

49
0
VARCHAR(50)
50
0
0
0





0
0
0



0
0
0
1
0
0
S_NAME

6
0
-100
0
0
0
0
3
60
60
s_number_employees
S_EMPLOYEES

Number of employees in the store\
1 to 1200 (to allow for seasonal swings), and should somewhat correlate to the sqare footage: \
\
600 sq ft --> 6 emplyees\
250000 sq ft --> 1200 employees\
\
Dependent on store.

49
0
INTEGER
0
0
0
0





0
0
0



0
0
0
1
0
0
S_EMPLOYEES

7
0
0
0
0
0
0
3
63
63
s_floor_space
S_FLOOR_SPACE

Floor space in square meters\
Dependent on store\
Should be coorlated with store type and larger for jumbo or anything that sounds big, and small for mini or mart or anything that sounds small.

49
0
INTEGER
0
0
0
0





0
0
0



0
0
0
1
0
0
S_FLOOR_SPACE

8
0
0
0
0
0
0
3
66
66
s_hours
S_HOURS

Classification for the hours that this store is open:\
standard, extended, 24-hr\
\
Dependent on store.\
\
Vary by location and state laws. For example, downtown stores may  close at 5:30PM \
Big Kmart closes at 10 pm,\
Super Kmart is 24 hours\
Sometimes stores don't open on Sunday due to Blue laws.

49
0
CHAR(20)
20
0
0
0





0
0
0



0
0
0
1
0
0
S_HOURS

9
0
0
0
0
0
0
3
1042
1042
s_manager
S_MANAGER

Unique id for the store manager.\
Dependent on store manager.

49
0
VARCHAR(40)
40
0
0
0





0
0
0



0
0
0
1
0
0
S_MGR

10
0
-100
0
0
0
0
3
69
69
s_market_id
S_MARKET_ID

Unique id for the market.  In the following hierarchy\
\
store ---> market ---->  market_manager\
\
Markets tend to be geographically based around cities.

49
0
INTEGER
0
0
0
0





0
0
0



0
0
0
1
0
0
S_MARKET_ID

11
0
0
0
0
0
0
3
70
70
s_geography_class
S_GEOGRAPHY_CLASS

For industrialized nations, this would be one of three classes:\
URBAN\
SUBURBAN\
RURAL\
\
Dependent on market.
This is the description of the sales region this store belongs to.
49
0
VARCHAR(100)
100
0
0
0





0
0
0



0
0
0
1
0
0
S_MARKET_CLASS

12
0
0
0
0
0
0
3
71
71
s_market_desc
S_MARKET_DESC

Desciption of the market.  Examples:\
Seattle North West\
Seattle South West\
Portland North\
Portland North East\
Portland South East\
Portland North West\
Portland South West\
Beaverton\
\
Tied to market id but is unique amoung other markets.

49
0
VARCHAR(100)
100
0
0
0





0
0
0



0
0
0
1
0
0
S_MARKET_DESCR

13
0
0
0
0
0
0
3
73
73
s_market_manager
S_MARKET_MANAGER

The identifier for the manager of the market.\
store ---> market ----> market_ manager_id\
\
A market manager manages several markets.  Those should be in a geographically close set of markets (ideally).

49
0
VARCHAR(40)
40
0
0
0





0
0
0



0
0
0
1
0
0
S_MARKET_MGR_FNAME

14
0
0
0
0
0
0
3
17968
17968
s_division_id
S_DIVISION_ID

Unique identifier for the corporate division that includes the company/store. Part of the hierarchy:\
\
store ---> company --> division --> THE CORPORATION\
\
Examples:\
State Street Store --> Marshall Fields --> Department Stores --> Target Corp
Is the placement of division in the hierarchy correct, or should it be between store and company?\
\
Current hierarchy: \
store ---> company --> division --> THE CORPORATION\
\
Examples:\
State Street Store --> Marshall Fields --> Department Stores --> Target Corp
49
0
INTEGER
0
0
0
0





0
0
0



0
0
0
1
0
0
S_DIVISION_ID

15
0
-100
0
0
0
0
3
17969
17969
s_division_name
S_DIVISION_NAME

Name of the division, dependent on division_id  (1-1)

49
0
VARCHAR(50)
50
0
0
0





0
0
0



0
0
0
1
0
0
S_DIVISION_NAME

16
0
-100
0
0
0
0
3
74
74
s_company_id
S_COMPANY

Unique identifier for the company that owns the store.  Part of the hierarchy:\
\
store ---> company --> division --> THE CORPORATION\
\
Examples:\
Fred Meyer Walker Road - company is Keogers.

49
0
INTEGER
0
0
0
0





0
0
0



0
0
0
1
0
0
S_COMPANY

17
0
0
0
0
0
0
3
1043
1043
s_company_name
S_COMPANY_NAME

Name of the company, dependent on company -id (1-1)

49
0
VARCHAR(50)
50
0
0
0





0
0
0



0
0
0
1
0
0
S_COMPANY_NAME

18
0
-100
0
0
0
0
3
18890
18890
s_street_number
S_STREET_NUMBER



49
0
VARCHAR(10)
10
0
0
0





0
0
0



0
0
0
1
0
0
S_STREET_NUMBER

19
0
-100
0
0
0
0
3
18892
18892
s_street_name
S_STREET_NAME



49
0
VARCHAR(60)
60
0
0
0





0
0
0



0
0
0
1
0
0
S_STREET_NAME

20
0
-100
0
0
0
0
3
18893
18893
s_street_type
S_STREET_TYPE



49
0
CHAR(15)
15
0
0
0





0
0
0



0
0
0
1
0
0
S_STREET_TYPE

21
0
-100
0
0
0
0
3
18891
18891
s_suite_number
S_SUITE_NUMBER



49
0
CHAR(10)
10
0
0
0





0
0
0



0
0
0
1
0
0
S_SUITE_NUM

22
0
-100
0
0
0
0
3
18894
18894
s_city
S_CITY



49
0
VARCHAR(60)
60
0
0
0





0
0
0



0
0
0
1
0
0
S_CITY

23
0
-100
0
0
0
0
3
18895
18895
s_county
S_COUNTY



49
0
VARCHAR(30)
30
0
0
0





0
0
0



0
0
0
1
0
0
S_COUNTY

24
0
-100
0
0
0
0
3
18896
18896
s_state
S_STATE



49
0
CHAR(2)
2
0
0
0





0
0
0



0
0
0
1
0
0
S_STATE

25
0
-100
0
0
0
0
3
18899
18899
s_zip
S_ZIP



49
0
CHAR(10)
10
0
0
0





0
0
0



0
0
0
1
0
0
S_ZIP

26
0
-100
0
0
0
0
3
18911
18911
s_country
S_COUNTRY



49
0
VARCHAR(20)
20
0
0
0





0
0
0



0
0
0
1
0
0
S_COUNTRY

27
0
-100
0
0
0
0
3
18897
18897
s_gmt_offset
S_GMT_OFFSET



49
0
DECIMAL (5,2)
5
2
0
0





0
0
0



0
0
0
1
0
0
S_LATITUDE

28
0
-100
0
0
0
0
3
41752
41752
s_tax_precentage
S_TAX_PRECENTAGE



49
0
DECIMAL (5,2)
5
2
0
0





0
0
0



0
0
0
1
0
0
S_TAX_PRECENTAGE

29
0
-100
0
0
0
0
3
22820
22820
inv_date_sk
INV_DATE_SK



50
0
INTEGER
0
0
0
0





0
0
0



1
1
1
1
0
0
D_DATE_SK

1
0
-100
0
0
0
0
3
22952
22952
inv_item_sk
INV_ITEM_SK



50
0
INTEGER
0
0
0
0





0
0
0



1
1
1
1
0
0
I_ITEM_SK

2
0
-100
0
0
0
0
3
24918
24918
inv_warehouse_sk
INV_WAREHOUSE_SK



50
0
INTEGER
0
0
0
0





0
0
0



1
1
1
1
0
0
W_WAREHOUSE_SK

3
0
-100
0
0
0
0
3
55
55
inv_quantity_on_hand
INV_QUANTITY_ON_HAND

inventory level on hand this day for this warehouse for this item\
\
Is there a row here if the item is not stocked by the warehouse?  If it is stocked, still need a rowwith a zero Qty on hand.

50
0
INTEGER
0
0
0
0





0
0
0



0
0
0
1
0
0
INV_QUANTITY

4
0
0
0
0
0
0
3
22949
22949
I_ITEM_SK
I_ITEM_SK



270
0
INTEGER
0
0
0
0





0
0
0



1
0
1
1
0
0
I_ITEM_SK

1
0
-100
0
0
0
0
3
271
271
I_ITEM_ID
I_ITEM_ID

A unique key internally generated.  An ITEM is the lowest level of the item hierarchy.  An item would be a distinct saleable item identified in practice by a unique SKU number.  Each ITEM_ID has a one-to-one relationship with the ITEM_DESC\\
 column.\
\
Primary key column.
How many item_ids are there?  Reasonable range for a large enterprise 1-1.5M.\
\
Will it scale with different database sizes?  Yes/No, how fast?\
\
Note that this question applies to all other tables in the hierarchy.
270
0
CHAR(16)
16
0
0
0





0
0
0



0
0
1
1
0
0
I_ITEM_ID

2
0
0
0
0
0
0
3
22950
22950
I_REC_START_DATE
I_REC_START_DATE_ID



270
0
date
0
0
0
0





0
0
0



0
0
0
1
0
0
I_REC_START_DATE_ID

3
0
-100
0
0
0
0
3
22951
22951
I_REC_END_DATE
I_REC_END_DATE_ID



270
0
date
0
0
0
0





0
0
0



0
0
0
1
0
0
I_REC_END_DATE_ID

4
0
-100
0
0
0
0
3
3668
3668
I_ITEM_DESC
I_ITEM_DESC

Textual item description, unique to Item_ID

270
0
VARCHAR(200)
200
0
0
0





0
0
0



0
0
0
1
0
0
I_ITEM_DESC

5
0
-100
0
0
0
0
3
275
275
I_CURRENT_PRICE
I_CURRENT_PRICE

Current price of the product, slowly changing over time.  \
\
Would be nice to make price facts in sales tables close to this number for a given item.

270
0
DECIMAL (7,2)
7
2
0
0





0
0
0



0
0
0
1
0
0
I_CURR_LPRICE

6
0
0
0
0
0
0
3
42480
42480
I_WHOLESALE_COST
I_WHOLESALE_COST



270
0
DECIMAL (7,2)
7
2
0
0





0
0
0



0
0
0
1
0
0
I_WHOLESALE_COST

7
0
-100
0
0
0
0
3
277
277
I_BRAND_ID
I_BRAND_ID

Unique id for brands, dependent on item_id and is part of the category hierarchy.\
\
10 items/brand\
\
item ---> brand --->subclass--->class--->subcategory ---> category

270
0
INTEGER
0
0
0
0





0
0
0



0
0
0
1
0
0
I_BRAND_ID

8
0
0
0
0
0
0
3
278
278
I_BRAND
I_BRAND

Brand discription:\
\
Dawn\
Tide\
Store Brand\
Jolly Green Giant\
Swanson's TV dinners\
\
Dependent on brand-id, but is a unique brand name over all brands.

270
0
CHAR(50)
50
0
0
0





0
0
0



0
0
0
1
0
0
I_BRAND

9
0
0
0
0
0
0
3
281
281
I_CLASS_ID
I_CLASS_ID

generated id for class\
4 subclasses/class\
\
item --->brand --->subclass--->class--->subcategory ---> category

270
0
INTEGER
0
0
0
0





0
0
0



0
0
0
1
0
0
I_CLASS_ID

10
0
0
0
0
0
0
3
282
282
I_CLASS
I_CLASS

class description (1-1 with class_ id).  A unique class description over all classes.

270
0
CHAR(50)
50
0
0
0





0
0
0



0
0
0
1
0
0
I_CLASS

11
0
0
0
0
0
0
3
285
285
I_CATEGORY_ID
I_CATEGORY_ID

generated id for catagory\
4 classes/subcategory\
\
\
\
item ---> brand --->subclass--->class--->subcategory ---> category

270
0
INTEGER
0
0
0
0





0
0
0



0
0
0
1
0
0
I_CATEGORY_ID

12
0
0
0
0
0
0
3
286
286
I_CATEGORY
I_CATEGORY

A unique category description (over all categories).\
4 subcategories/category\
\
There are about 200 categories in a typical store, maybe 600 in the enterprise\
categories include\
drug, dairy, fresh fruits, household, outdoor furniture,....

270
0
CHAR(50)
50
0
0
0





0
0
0



0
0
0
1
0
0
I_CATEGORY

13
0
0
0
0
0
0
3
287
287
I_MANUFACT_ID
I_MANUFACT_ID

60 brands/manufacturer\
Manufacturer identifier\
\
manufacture is related to item and brand.  If an item is in a brand, the manufacture that makes that brand makes also all items in that brand.\
\
\
item ---> brand --->manufacturer

270
0
INTEGER
0
0
0
0





0
0
0



0
0
0
1
0
0
I_MANUFACT_ID

14
0
0
0
0
0
0
3
288
288
I_MANUFACT
I_MANUFACT

Manufacturer, 1-1 with manufacturer id (unique for all manufactures).\
\
BF Goodrich\
Dixie Beer

270
0
CHAR(50)
50
0
0
0





0
0
0



0
0
0
1
0
0
I_MANUFACT

15
0
0
0
0
0
0
3
289
289
I_SIZE
I_SIZE

1-1 with item_id, can be "null"\
\
example:\
\
ladies           2,4,6,8,10,12,14,16,18,1x,2x,3x\
misses           XS,S,M.L,XL, XXL\
girls \
boys\
mens \
\
 (shoe sizes) \
                           1,2,3,4,5,6,7,8,9,10,11,12,13          AAA,AA,A,B,C,D,E\
ladies\
mens\
kids

270
0
CHAR(20)
20
0
0
0





0
0
0



0
0
0
1
0
0
I_SIZE

16
0
0
0
0
0
0
3
290
290
I_FORMULATION
I_FORMULATION

1-1 with item\
\
special formulas (depending on the item category, perhaps)\
low fat\
x% fat\
new formula\
low salt\
perfume free\
lead free\
fat free\
non-arrisole\
anti-itch\
anti-snooze\
..

270
0
CHAR(20)
20
0
0
0





0
0
0



0
0
0
1
0
0
I_FORMULATION

17
0
0
0
0
0
0
3
291
291
I_COLOR
I_COLOR

1-1 with item\
can be "null" \
\
\
cherry flavor\
lemon flavor\
country fresh

270
0
CHAR(20)
20
0
0
0





0
0
0



0
0
0
1
0
0
I_FLAVOR

18
0
0
0
0
0
0
3
292
292
I_UNITS
I_UNITS

1-1 with item\
\
measuring units for items\
oz,lbs,kg,g,\
m,cm,inches, feet, yards, meters\
cc, liters, ml, pints, quarts, qal, 5 gal, 10 gal....\
\
can be "null"

270
0
CHAR(10)
10
0
0
0





0
0
0



0
0
0
1
0
0
I_UNITS

19
0
0
0
0
0
0
3
293
293
I_CONTAINER
I_CONTAINER

1-1 with item\
examples:\
\
plastic jar\
plastic bottle  no deposit\
plastic bottle deposit\
plastic carton\
glass jar\
glass bottle no deposit\
glass bottle deposit\
tin can\
cardboard box\
cardboard carton\
plastic wrap

270
0
CHAR(10)
10
0
0
0





0
0
0



0
0
0
1
0
0
I_CONTAINER

20
0
0
0
0
0
0
3
294
294
I_MANAGER_ID
I_MANAGER_ID

This field is the identifier for the product manager that manages the brand to which this item belong..  (like an employee number for the manager).\
\
One to many, manger to brand.  That is, one manager manages one or more multiple brands.  \
\
Each item belongs to exactly one brand, and potentially several brands map to one manager.\
\
item  ---> brand --->manager_id
Need to decide how many managers there are, and how many brands each manages.
270
0
INTEGER
0
0
0
0





0
0
0



0
0
0
1
0
0
I_MANAGER_ID

21
0
0
0
0
0
0
3
17963
17963
I_PRODUCT_NAME
I_PRODUCT_NAME

Product name, dependent on product_id column (but is a unique name over all products).  Example::\
\
Dawn Dishwashing Liquid 12oz Size

270
0
CHAR(50)
50
0
0
0





0
0
0



0
0
0
1
0
0
I_PRODUCT_NAME

22
0
0
0
0
0
0
3
22819
22819
d_date_sk
D_DATE_SK



308
0
INTEGER
0
0
0
0





0
0
0



1
0
1
1
0
0
D_DATE_SK

1
0
-100
0
0
0
0
3
309
309
d_date_id
D_DATE_ID

Generated field. \
\
RESERVE ZERO, as zero has special meaning for date_ids found in end_date fields to mean "current"\
\
The meaning of the date depends on the context.  For example,  when the sales table date field ss_sold_date_id points this row, it refers to the date sold relative to the store where it was sold.  When the catalog sales table\\
 cs_sold_date_id points to this row, it is the date at the call center when the item was sold, and cs_cust_date_id is the date at the customer location when it was sold.  Some dimension tables use this id when identifying a date, such as\\
 the season table.\
\
Our calendar is "date grane based calendar" not for example fiscal year calendar. This implies that we have two hierarchies:\
date --> week\
date ---> month ---> quarter ---> year

308
0
CHAR(16)
16
0
0
0





0
0
0



0
0
1
1
0
0
D_DATE_ID

2
0
-100
0
0
0
0
3
310
310
d_date
D_DATE

date expressed as a date datatype; see also date_id description

308
0
DATE
0
0
0
0





0
0
0



0
0
0
1
0
0
D_SQL_DATE

3
0
-100
0
0
0
0
3
311
311
d_month_seq
D_MONTH_SEQ

Id unique for this month.\
date ---> month ---> quarter ---> year

308
0
INTEGER
0
0
0
0





0
0
0



0
0
0
1
0
0
D_MONTH

4
0
-100
0
0
0
0
3
312
312
d_week_seq
D_WEEK_SEQ

Number unique for this week\
date --> week

308
0
INTEGER
0
0
0
0





0
0
0



0
0
0
1
0
0
D_WEEK

5
0
-100
0
0
0
0
3
313
313
d_quarter_seq
D_QUARTER_SEQ

Number unique for this quarter\
\
date ---> month ---> quarter ---> year

308
0
INTEGER
0
0
0
0





0
0
0



0
0
0
1
0
0
D_QUARTER

6
0
-100
0
0
0
0
3
314
314
d_year
D_YEAR

Number unique for this year (1999, 2000)\
\
date ---> month ---> quarter ---> year
Domain should be defined.
308
0
INTEGER
0
0
0
0





0
0
0



0
0
0
1
0
0
D_YEAR

7
0
-100
0
0
0
0
3
315
315
d_dow
D_DOW

Day of the Week 1 through 7.\
\
We always assume that Sunday is 1 (we are modeling US only operation).\
\
dependent on week

308
0
INTEGER
0
0
0
0





0
0
0



0
0
0
1
0
0
D_DOW

8
0
-100
0
0
0
0
3
15354
15354
d_moy
D_MOY

Month of the Year 1 through 12.\
\
January is 1.

308
0
INTEGER
0
0
0
0





0
0
0



0
0
0
1
0
0
D_MOY

9
0
-100
0
0
0
0
3
316
316
d_dom
D_DOM

Day of the Month 1 through 31\
dependent on month

308
0
INTEGER
0
0
0
0





0
0
0



0
0
0
1
0
0
D_DOM

10
0
-100
0
0
0
0
3
318
318
d_qoy
D_QOY

Quarter number in the year 1,2,3, or 4\
dependent on quarter. \
There is a quarter starting on January 1st.  It is quarter 1.

308
0
INTEGER
0
0
0
0





0
0
0



0
0
0
1
0
0
D_QOY

11
0
-100
0
0
0
0
3
15355
15355
d_fy_year
D_FY_YEAR

Fiscal Year.\
The domain should be derived from the domain of the D_YEAR.
The domain has a dependency on the D_YEAR and it should be resolved.
308
0
INTEGER
0
0
0
0





0
0
0



0
0
0
1
0
0
D_FY_YEAR

12
0
-100
0
0
0
0
3
15356
15356
d_fy_quarter_seq
D_FY_QUARTER_SEQ

Quarter in Fiscal Year.\
Domain (1,2,3,4)

308
0
INTEGER
0
0
0
0





0
0
0



0
0
0
1
0
0
D_FY_QUARTER_SEQ

13
0
-100
0
0
0
0
3
15357
15357
d_fy_week_seq
D_FY_WEEK_SEQ

Week of a fiscal year. Integer 1-53.

308
0
INTEGER
0
0
0
0





0
0
0



0
0
0
1
0
0
D_FY_WEEK_SEQ

14
0
-100
0
0
0
0
3
317
317
d_day_name
D_DAY_NAME

Name of day (SUN, MON, TUE, WED, THU, FRI, SAT)\
dependent on date.

308
0
CHAR(9)
9
0
0
0





0
0
0



0
0
0
1
0
0
D_DAY_NAME

15
0
-100
0
0
0
0
3
319
319
d_quarter_name
D_QUARTER_NAME

